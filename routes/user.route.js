module.exports = app => {
  const users = require("../controller/user.controller");

  var router = require("express").Router();

  /**
   * @swagger
   * components:
   *   securitySchemes:
   *     bearerAuth:
   *       type: http
   *       scheme: bearer
   *       bearerFormat: JWT
   *   schemas:
   *     User:
   *       type: object
   *       required:
   *         - name
   *         - email
   *         - password
   *         - image
   *         - address
   *         - phoneNumber
   *         - age
   *       properties:
   *         name:
   *           type: string
   *           description: The name of the user
   *         email:
   *           type: string
   *           description: The email of the user
   *         password:
   *           type: string
   *           description: The password of the user
   *         image:
   *           type: string
   *           description: The profile pic of the user
   *         address:
   *           type: string
   *           description: The address of the user
   *         phoneNumber:
   *           type: string
   *           description: The phone number of the user
   *         age:
   *           type: number
   *           description: The age of the user
   *       example:
   *         name: Carlos
   *         email: carlos@example.com
   *         password: password
   *         image: imageurl
   *         address: str20-str45
   *         phoneNumber: 1144-877
   *         age: 20
   *     UserResponse:
   *       type: object
   *       required:
   *         - id
   *         - name
   *         - email
   *         - password
   *         - image
   *         - address
   *         - phoneNumber
   *         - age
   *         - createdAt
   *         - updatedAt 
   *       properties:
   *         id:
   *           type: number
   *           description: The autogenerated id of the user
   *         name:
   *           type: string
   *           description: The name of the user
   *         email:
   *           type: string
   *           description: The email of the user
   *         password:
   *           type: string
   *           description: The password of the user
   *         image:
   *           type: string
   *           description: The profile pic of the user
   *         address:
   *           type: string
   *           description: The address of the user
   *         phoneNumber:
   *           type: string
   *           description: The phone number of the user
   *         age:
   *           type: number
   *           description: The age of the user
   *         createdAt:
   *           type: text
   *           description: The date the user was created
   *         updateddAt:
   *           type: text
   *           description: The date the user was updated
   *       example:
   *         id: 1
   *         name: Carlos
   *         email: carlos@example.com
   *         password: password
   *         image: imageurl
   *         address: str20-str45
   *         phoneNumber: 1144-877
   *         age: 20
   *         createdAt: 2023-06-14T20:47:27.439Z
   *         updatedAt: 2023-06-14T20:47:27.439Z
   *     UserLogin:
   *       type: object
   *       required:
   *         - email
   *         - password
   *       properties:
   *         email:
   *           type: string
   *           description: The email of the user
   *         password:
   *           type: string
   *           description: The password of the user
   *       example:
   *         email: carlos@example.com
   *         password: password
   */

  /**
   * @swagger
   * tags:
   *   name: Users
   *   description: The users managing API
   * /api/users:
   *   post:
   *     security:
   *       - bearerAuth: []
   *     summary: Create a new user
   *     tags: [Users]
   *     requestBody:
   *       required: true
   *       content:
   *         application/json:
   *           schema:
   *             $ref: '#/components/schemas/User'
   *     responses:
   *       200:
   *         description: The created user.
   *         content:
   *           application/json:
   *             schema:
   *               $ref: '#/components/schemas/UserResponse'
   *       401:
   *         description: Invalid token added to the authorization header.
   *         content:
   *           application/json:
   *             schema:
   *               message: Unauthorized! 
   *       403:
   *         description: No token added to the authorization header.
   *         content:
   *           application/json:
   *             schema:
   *               message: No token provided!
   *       500:
   *         description: Some server error
   *   get:
   *     security:
   *       - bearerAuth: []
   *     summary: Get all users
   *     tags: [Users]
   *     responses:
   *       200:
   *         description: All the users in the database.
   *         content:
   *           application/json:
   *             schema:
   *               $ref: ['#/components/schemas/UserResponse']
   *       401:
   *         description: Invalid token added to the authorization header.
   *         content:
   *           application/json:
   *             schema:
   *               message: Unauthorized! 
   *       403:
   *         description: No token added to the authorization header.
   *         content:
   *           application/json:
   *             schema:
   *               message: No token provided!
   *       500:
   *         description: Some server error
   *   delete:
   *     security:
   *       - bearerAuth: []
   *     summary: Get all users
   *     tags: [Users]
   *     responses:
   *       200:
   *         description: Delete all the users in the database.
   *         content:
   *           application/json:
   *             schema:
   *               $ref: ['#/components/schemas/UserResponse']
   *       401:
   *         description: Invalid token added to the authorization header.
   *         content:
   *           application/json:
   *             schema:
   *               message: Unauthorized! 
   *       403:
   *         description: No token added to the authorization header.
   *         content:
   *           application/json:
   *             schema:
   *               message: No token provided!
   *       500:
   *         description: Some server error
   * /api/users/{id}:
   *   put:
   *     security:
   *       - bearerAuth: []
   *     summary: Update a user
   *     parameters:
   *       - in: path
   *         name: id
   *         schema:
   *           type: string
   *         required: true
   *         description: The user id
   *     tags: [Users]
   *     requestBody:
   *       required: true
   *       content:
   *         application/json:
   *           schema:
   *             $ref: '#/components/schemas/User'
   *     responses:
   *       200:
   *         description: The updated user.
   *         content:
   *           application/json:
   *             schema:
   *               $ref: '#/components/schemas/UserResponse'
   *       401:
   *         description: Invalid token added to the authorization header.
   *         content:
   *           application/json:
   *             schema:
   *               message: Unauthorized! 
   *       403:
   *         description: No token added to the authorization header.
   *         content:
   *           application/json:
   *             schema:
   *               message: No token provided!
   *       500:
   *         description: Some server error
   *   get:
   *     security:
   *       - bearerAuth: []
   *     summary: Get specific user
   *     parameters:
   *       - in: path
   *         name: id
   *         schema:
   *           type: string
   *         required: true
   *         description: The user id
   *     tags: [Users]
   *     responses:
   *       200:
   *         description: Get one user in the database.
   *         content:
   *           application/json:
   *             schema:
   *               $ref: ['#/components/schemas/UserResponse']
   *       401:
   *         description: Invalid token added to the authorization header.
   *         content:
   *           application/json:
   *             schema:
   *               message: Unauthorized! 
   *       403:
   *         description: No token added to the authorization header.
   *         content:
   *           application/json:
   *             schema:
   *               message: No token provided!
   *       500:
   *         description: Some server error
   *   delete:
   *     security:
   *       - bearerAuth: []
   *     summary: Delete one user
   *     parameters:
   *       - in: path
   *         name: id
   *         schema:
   *           type: string
   *         required: true
   *         description: The user id
   *     tags: [Users]
   *     responses:
   *       200:
   *         description: Delete one user in the database.
   *         content:
   *           application/json:
   *             schema:
   *               $ref: ['#/components/schemas/UserResponse']
   *       401:
   *         description: Invalid token added to the authorization header.
   *         content:
   *           application/json:
   *             schema:
   *               message: Unauthorized! 
   *       403:
   *         description: No token added to the authorization header.
   *         content:
   *           application/json:
   *             schema:
   *               message: No token provided!
   *       500:
   *         description: Some server error
   * /api/users/login:
   *   post:
   *     summary: Login as a user
   *     tags: [Users]
   *     requestBody:
   *       required: true
   *       content:
   *         application/json:
   *           schema:
   *             $ref: '#/components/schemas/UserLogin'
   *     responses:
   *       200:
   *         description: The user that logged in.
   *         content:
   *           application/json:
   *             schema:
   *               message: token
   *       401:
   *         description: Invalid password.
   *         content:
   *           application/json:
   *             schema:
   *               message: Invalid password! 
   *       404:
   *         description: User not found!
   *         content:
   *           application/json:
   *             schema:
   *               message: User not found!
   *       500:
   *         description: Some server error
   * /api/users/signup:
   *   post:
   *     summary: Signup to create a new user
   *     tags: [Users]
   *     requestBody:
   *       required: true
   *       content:
   *         application/json:
   *           schema:
   *             $ref: '#/components/schemas/User'
   *     responses:
   *       200:
   *         description: The user that just signed up.
   *         content:
   *           application/json:
   *             schema:
   *               $ref: '#/components/schemas/User'
   *       400:
   *         description: Information incomplete.
   *         content:
   *           application/json:
   *             schema:
   *               message: Invalid password!
   *       500:
   *         description: Some server error
   *
   */

  router.post("/", users.create);

  router.get("/", users.findAll);

  router.get("/:id", users.findOne);

  router.put("/:id", users.update);

  router.delete("/:id", users.delete);

  router.delete("/", users.deleteAll);

  router.post("/login", users.login);

  router.post("/signup", users.signup);

  app.use('/api/users', router);
};
